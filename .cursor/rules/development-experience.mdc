---
description: 本文档包含了项目开发过程中的最佳实践、经验总结和规范指南，涵盖了Windows环境配置、Python开发、数据库使用、API开发、前端开发等多个方面。
globs: 
alwaysApply: false
---
{
  "type": "agent_requested",
  "title": "开发经验总结与指南",
  "description": "本文档包含了项目开发过程中的最佳实践、经验总结和规范指南，涵盖了Windows环境配置、Python开发、数据库使用、API开发、前端开发等多个方面。",
  "version": "1.0.0",
  "author": "MiaoDao Team",
  "categories": [
    "development",
    "best-practices",
    "guidelines"
  ],
  "tags": [
    "windows",
    "python",
    "fastapi",
    "sqlite",
    "frontend",
    "logging"
  ],
  "scope": {
    "includes": [
      "*.py",
      "*.js",
      "*.ts",
      "*.html",
      "*.css"
    ],
    "excludes": [
      "node_modules/**",
      "venv/**",
      "**/__pycache__/**"
    ]
  },
  "priority": "high",
  "lastUpdated": "2024-03-13"
}

<!-- Development Experience Rules -->

<!-- Rules and best practices derived from our development experience -->

<!-- Windows PowerShell Command Separator -->
When executing multiple commands in Windows PowerShell:
- DO NOT use `&&` as command separator
- DO use `;` or execute commands separately
```powershell
# Bad
cd backend && pip install -r requirements.txt

# Good
cd backend; pip install -r requirements.txt
# Or
cd backend
pip install -r requirements.txt
```

<!-- Windows Path Handling -->
When working with paths in Windows PowerShell:
- DO NOT use forward slashes `/` for paths
- DO use backslashes `\` or `Join-Path` cmdlet
```powershell
# Bad
cd backend/app/api

# Good
cd backend\app\api
# Or
cd (Join-Path "backend" "app" "api")
```

<!-- Console Encoding -->
To handle Chinese characters in PowerShell:
```powershell
$OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
```

<!-- Virtual Environment Activation -->
Use the correct activation script for your shell:
```powershell
# Windows PowerShell
.\.venv\Scripts\Activate.ps1

# Windows CMD
.\.venv\Scripts\activate.bat

# Linux/Mac
source .venv/bin/activate
```

<!-- PowerShell Execution Policy -->
If virtual environment activation fails:
```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

<!-- Storage Directory Management -->
Always ensure storage directories exist:
```python
import os

def ensure_storage_dirs():
    dirs = [
        'storage/images',
        'storage/images/processed',
        'storage/temp'
    ]
    for dir_path in dirs:
        os.makedirs(dir_path, exist_ok=True)
```

<!-- Temporary File Handling -->
Use context managers for temporary files:
```python
from tempfile import NamedTemporaryFile

with NamedTemporaryFile(delete=False) as tmp:
    # Process temporary file
    pass
```

<!-- SQLite Configuration -->
Configure SQLite for concurrent access:
```python
SQLALCHEMY_DATABASE_URL = "sqlite:///./app.db"
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},
    pool_size=1
)
```

<!-- SQLite Foreign Keys -->
Enable foreign key support:
```python
from sqlalchemy import event

@event.listens_for(engine, "connect")
def set_sqlite_pragma(dbapi_connection, connection_record):
    cursor = dbapi_connection.cursor()
    cursor.execute("PRAGMA foreign_keys=ON")
    cursor.close()
```

<!-- CORS Configuration -->
Configure CORS middleware properly:
```python
from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # For development
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

<!-- Error Response Format -->
Use consistent error response format:
```python
from fastapi import HTTPException
from fastapi.responses import JSONResponse

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "code": exc.status_code,
            "message": exc.detail,
            "success": False
        }
    )
```

<!-- Image Preview -->
Handle image previews correctly:
```javascript
function handleImagePreview(file) {
    // Using FileReader
    const reader = new FileReader();
    reader.onload = (e) => {
        previewElement.src = e.target.result;
    };
    reader.readAsDataURL(file);
    
    // Or using URL.createObjectURL
    previewElement.src = URL.createObjectURL(file);
}
```

<!-- Image Error Handling -->
Implement fallback for image loading errors:
```javascript
function setupImageErrorHandling() {
    document.querySelectorAll('img').forEach(img => {
        img.onerror = function() {
            this.src = `https://via.placeholder.com/300x300?text=${encodeURIComponent(this.alt || '图片加载失败')}`;
        };
    });
}
```

<!-- Structured Logging -->
Use structured logging format:
```python
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
```

<!-- API Request Logging -->
Log API requests with timing:
```python
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    logger.info(f"{request.method} {request.url.path} - {response.status_code} - {process_time:.2f}s")
    return response




```